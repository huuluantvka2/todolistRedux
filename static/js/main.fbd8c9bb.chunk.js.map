{"version":3,"sources":["Components/Title.js","actions/indexAction.js","constants/actionType.js","Components/TaskForm.js","Components/TaskSearch.js","Components/TaskSort.js","Components/TaskControl.js","Components/TaskItem.js","Components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/displayForm.js","reducers/editTask.js","reducers/filterTable.js","reducers/searchTask.js","reducers/sortTask.js","reducers/indexReducer.js","index.js"],"names":["Title","className","Component","editTask","task","type","TaskForm","props","onCloseForm","onClearTask","id","name","status","onChange","event","target","value","setState","onClear","onSubmit","preventDefault","onAddTask","state","taskEditing","this","prevProps","prevState","keyy","isDisplayForm","onClick","connect","displayForm","tasks","dispatch","actions","TaskSearch","onSearch","keyword","placeholder","TaskSort","onSort","sortBy","sortValue","sort","by","data-toggle","href","TaskControl","TaskItem","updateStatus","onUpdateStatus","onDelete","onDeleteTask","onEdit","onEditTask","onOpenForm","index","TaskList","filter","filterName","filterStatus","onFilterTable","toLowerCase","indexOf","a","b","elmItems","map","key","scope","filterTable","searchTask","sortTask","App","onShowForm","onToggleForm","localStorage","getItem","JSON","parse","onFilter","Boolean","window","location","hostname","match","data","initialState","findIndex","result","forEach","myReducer","action","Task","uuidv4","push","setItem","stringify","cloneTask","splice","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbd8c9bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <h1>Quản Lý Công Việc</h1>\r\n                <hr />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;","import * as types from '../constants/actionType';\r\nexport const listALL = () => {\r\n    return {\r\n        type : types.LIST_ALL\r\n    }\r\n};\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type : types.SAVE_TASK,\r\n        task\r\n    }\r\n};\r\nexport const toggleForm = () => {\r\n    return {\r\n        type : types.TOGGLE_FORM\r\n    }\r\n};\r\nexport const closeForm = () => {\r\n    return {\r\n        type : types.CLOSE_FORM\r\n    }\r\n};\r\nexport const openForm = () => {\r\n    return {\r\n        type : types.OPEN_FORM\r\n    }\r\n};\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type : types.UPDATE_STATUS,\r\n        id : id\r\n    }\r\n};\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type : types.DELETE_TASK,\r\n        id : id\r\n    }\r\n};\r\nexport const editTask = (task) => {\r\n    return {\r\n        type : types.EDIT_TASK,\r\n        task\r\n    }\r\n};\r\nexport const filterTable = (filter) => {\r\n    return {\r\n        type : types.FILTER_TABLE,\r\n        filter\r\n    }\r\n};\r\nexport const search = (keyword) => {\r\n    return {\r\n        type : types.SEARCH,\r\n        keyword\r\n    }\r\n};\r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type : types.SORT,\r\n        sort\r\n    }\r\n};","export const LIST_ALL = \"LIST_ALL\";\r\nexport const SAVE_TASK = \"SAVE_TASK\";\r\nexport const TOGGLE_FORM = \"TOGGLE_FORM\";\r\nexport const OPEN_FORM = \"OPEN_FORM\";\r\nexport const CLOSE_FORM = \"CLOSE_FORM\";\r\nexport const UPDATE_STATUS = \"UPDATE_STATUS\";\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/indexAction';\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name : '',\r\n            status : true,\r\n            id : ''\r\n        }\r\n    }\r\n    \r\n    onCloseForm = () => {\r\n        var task = {\r\n            id : '',\r\n            name : '',\r\n            status : false\r\n        }\r\n        this.props.onClearTask(task);\r\n        this.props.onCloseForm();\r\n    };\r\n    onChange = (event) => {\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        if (name === 'status'){\r\n            value = value === 'true' ? true : false;\r\n        }\r\n        this.setState ({\r\n            [name] : value\r\n        })\r\n    };\r\n    onClear = () => {\r\n        this.setState({\r\n            name : '',\r\n            status : true,\r\n            id : ''\r\n        })\r\n    };\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAddTask(this.state);\r\n        this.props.onCloseForm();\r\n        this.onClear()\r\n    };\r\n    componentDidMount() {\r\n        let {taskEditing} = this.props;\r\n        if(taskEditing.id !==''){\r\n            this.setState({\r\n                name : taskEditing.name,\r\n                id : taskEditing.id,\r\n                status : taskEditing.status\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let keyy = prevProps.taskEditing;\r\n        let {taskEditing} = this.props;\r\n        if(keyy.id !== prevState.id || keyy.id !== taskEditing.id ){\r\n            this.setState({\r\n                name : taskEditing.name,\r\n                status : taskEditing.status,\r\n                id : taskEditing.id\r\n            })\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        let {isDisplayForm,taskEditing} = this.props;\r\n        if(!isDisplayForm) return '';\r\n        return (\r\n                <div className=\"card border-card\">\r\n                    <div className=\"card-header bg-card\">\r\n                        {taskEditing.id ==='' ? 'Thêm công việc' : 'Cập nhật công việc'}\r\n                    </div>\r\n                    <div className=\"card-body\" onSubmit ={this.onSubmit}>\r\n                        <label>Tên :</label>\r\n                        <input type=\"text\" className=\"form-control mt-2\" name =\"name\" value ={this.state.name} onChange ={this.onChange} />\r\n                        <label>Trạng Thái :</label>\r\n                        <select className=\"form-control\" name =\"status\" value ={this.state.status} onChange ={this.onChange}>\r\n                        <option value={true}>Kích Hoạt</option>\r\n                        <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <button type=\"submit\" className=\"btn btn-warning mt-2 mr-1\" onClick = {this.onSubmit}>Thêm</button>\r\n                        <button type=\"submit\" className=\"btn btn-danger mt-2\" onClick = {this.onCloseForm}>Hủy Bỏ</button>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm : state.displayForm,\r\n        tasks : state.tasks,\r\n        taskEditing : state.editTask\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onAddTask :  (task) => {\r\n            dispatch(actions.saveTask(task))\r\n        },\r\n        onCloseForm : () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n        onClearTask : (task) => {\r\n            dispatch(actions.editTask(task))\r\n        },\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/indexAction';\r\nclass TaskSearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword : ''\r\n    }\r\n  }\r\n  onChange = (event) =>{\r\n    let target = event.target;\r\n    let name = target.name;\r\n    let value = target.value;\r\n    this.setState({\r\n      [name] : value\r\n    })\r\n  }\r\n  onSearch = () =>{\r\n    this.props.onSearch(this.state.keyword);\r\n  }\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm-6\">\r\n                <div className=\"input-group\">\r\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" name =\"keyword\" value ={this.state.keyword} onChange ={this.onChange} />\r\n                  <span className=\"input-group-btn\">\r\n                    <button className=\"btn btn-primary\" onClick ={this.onSearch} type=\"button\">Tìm</button>\r\n                  </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      \r\n  }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n      onSearch :  (keyword) => {\r\n          dispatch(actions.search(keyword))\r\n      },\r\n  }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskSearch);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/indexAction';\r\nclass TaskSort extends Component {\r\n  onSort = (sortBy,sortValue) => {\r\n    let sort = {\r\n      by : sortBy,\r\n      value : sortValue\r\n    }\r\n    this.props.onSort(sort);\r\n  };\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"btn-group\">\r\n                  <button type=\"button\" className=\"btn btn-danger dropdown-toggle\" data-toggle=\"dropdown\">\r\n                    Sắp xếp\r\n                  </button>\r\n                  <div className=\"dropdown-menu\">\r\n                    <a className=\"dropdown-item\" onClick ={() => this.onSort('name',1)} href=\"/#\">Tên A-Z</a>\r\n                    <a className=\"dropdown-item\" onClick ={() => this.onSort('name',-1)} href=\"/#\">Tên Z-A</a> \r\n                    <div className=\"dropdown-divider\" />\r\n                    <a className=\"dropdown-item\" onClick ={() => this.onSort('status',1)} href=\"/#\">Trạng Thái Kích Hoạt</a>\r\n                    <a className=\"dropdown-item\" onClick ={() => this.onSort('status',-1)} href=\"/#\">Trạng Thái Ẩn</a>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      \r\n  }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n      onSort :  (sort) => {\r\n          dispatch(actions.sortTask(sort))\r\n      },\r\n  }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskSort);","import React, { Component } from 'react';\r\nimport TaskSearch from './TaskSearch';\r\nimport TaskSort from './TaskSort';\r\n\r\nclass TaskControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <TaskSearch />\r\n                <TaskSort />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskControl;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/indexAction';\r\nclass TaskItem extends Component {\r\n    updateStatus = (id) => {\r\n        this.props.onUpdateStatus(id);\r\n    };\r\n    onDelete = (id) => {\r\n        this.props.onDeleteTask(id);\r\n    };\r\n    onEdit = (task) => {\r\n        this.props.onEditTask(task);\r\n        this.props.onOpenForm()\r\n    };\r\n    render() {\r\n        let {task} = this.props;\r\n        return (\r\n            <tr>\r\n                <td>{this.props.index + 1}</td>\r\n                <td>{task.name}</td>\r\n                <td>\r\n                <span className={task.status === true ? \"badge badge-success\" : \"badge badge-danger\"} onClick ={() =>this.updateStatus(task.id)}>\r\n                    {task.status === true ? \"Kích hoạt\" : \"Ẩn\"}\r\n                </span>\r\n                </td>\r\n                <td>\r\n                <button type=\"button\" className=\"btn btn-warning mr-1\" onClick ={() => this.onEdit(task)}>\r\n                    Sửa\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick ={() =>this.onDelete(task.id)}>\r\n                    Xóa\r\n                </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        \r\n    }\r\n  };\r\n  const mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n      onUpdateStatus : (id) => {\r\n        dispatch(actions.updateStatus(id))\r\n      },\r\n      onDeleteTask : (id) => {\r\n        dispatch(actions.deleteTask(id))\r\n      },\r\n      onEditTask : (task) => {\r\n        dispatch(actions.editTask(task))\r\n      },\r\n      onOpenForm : () => {\r\n        dispatch(actions.openForm())\r\n      },\r\n    }\r\n  };\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport { connect} from 'react-redux';\r\nimport * as actions from '../actions/indexAction';\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName : '',\r\n            filterStatus : -1\r\n        }\r\n    }\r\n    onChange = (event) => {\r\n        let target = event.target;\r\n        let value = target.value;\r\n        let name = target.name;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n        var filter = {\r\n            name : name === 'filterName' ? value : this.state.filterName,\r\n            status : name === 'filterStatus' ? value : this.state.filterStatus,\r\n        }\r\n        this.props.onFilterTable(filter);\r\n    };\r\n    render() {\r\n        let {tasks,filter,keyword,sort} = this.props;\r\n        if(filter){\r\n            if(filter.name){\r\n                tasks = tasks.filter((task) => {\r\n                    return task.name.toLowerCase().indexOf(filter.name.toLowerCase()) !== -1;\r\n                })\r\n            }\r\n            if(filter.status !== -1){\r\n                tasks = tasks.filter((task) =>{\r\n                    return task.status === (filter.status === 0 ? false : true);\r\n                })\r\n            }\r\n        }\r\n        if(keyword){\r\n            tasks = tasks.filter((task) =>{\r\n                return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\r\n            })\r\n        }\r\n        if(sort){\r\n            if(sort.by === 'name'){\r\n                tasks.sort((a,b) => {\r\n                    if(a.name > b.name){\r\n                        return sort.value;\r\n                    }\r\n                    else if(a.name === b.name){\r\n                        return 0;\r\n                    }\r\n                    else return -sort.value\r\n                })\r\n            }\r\n            else{\r\n                tasks.sort((a,b) => {\r\n                    if(a.status > b.status){\r\n                        return -sort.value;\r\n                    }\r\n                    else if(a.status === b.status){\r\n                        return 0;\r\n                    }\r\n                    else return sort.value\r\n                })\r\n            }\r\n        }\r\n        let elmItems = tasks.map((task,index) =>{\r\n            return <TaskItem \r\n                        key ={task.id} \r\n                        index ={index} \r\n                        task = {task}\r\n                    /> \r\n        })\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">STT</th>\r\n                            <th scope=\"col\">Tên</th>\r\n                            <th scope=\"col\">Trạng thái</th>\r\n                            <th scope=\"col\">Hành động</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td />\r\n                            <td>\r\n                            <input type=\"text\" className=\"form-control\" name =\"filterName\" value ={this.state.filterName} onChange ={this.onChange} />\r\n                            </td>\r\n                            <td>\r\n                            <select className=\"form-control\" name =\"filterStatus\" value ={this.state.filterStatus} onChange ={this.onChange}>\r\n                                <option value={-1}>Tất Cả</option>\r\n                                <option value={0}>Ẩn</option>\r\n                                <option value={1}>Kích Hoạt</option>\r\n                            </select>\r\n                            </td>\r\n                            <td />\r\n                        </tr>\r\n                        {elmItems}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tasks : state.tasks,\r\n        filter : state.filterTable,\r\n        keyword : state.searchTask,\r\n        sort : state.sortTask\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch,props) => {\r\n    return {\r\n        onFilterTable : (filter) => {\r\n            dispatch(actions.filterTable(filter))\r\n        },\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);","import React, { Component } from 'react';\nimport Title from './Components/Title';\nimport TaskForm from './Components/TaskForm';\nimport TaskControl from './Components/TaskControl';\nimport TaskList from './Components/TaskList';\nimport {connect} from 'react-redux';\nimport * as actions from './actions/indexAction';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter : {\n        name : '',\n        status : -1\n      },\n      keyword : '',\n      sortBy : 'name',\n      sortValue : 1\n    }\n  }\n  onShowForm = () => {\n    var task = {\n      id : '',\n      name : '',\n      status : false\n    }\n    let {taskEditing} = this.props;\n    if(taskEditing && taskEditing.id !== ''){\n      this.props.onOpenForm();\n      this.props.onClearTask(task);\n    }else {\n      this.props.onToggleForm();\n      this.props.onClearTask(task);\n    }\n  };\n  onSort = (sortBy,sortValue) => {\n    this.setState({\n      sortBy : sortBy,\n      sortValue : sortValue\n    })\n  };\n  componentDidMount() {\n    if(localStorage.getItem('tasks')){\n      let tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks : tasks\n      })\n    }\n  }\n  \n  render() {\n    let {isDisplayForm} = this.props;   \n    // if(sortBy === 'name'){\n    //   tasks.sort((a,b) =>{\n    //     if(a.name > b.name){\n    //       return sortValue\n    //     } else if(a.name === b.name){\n    //       return 0\n    //     } else{\n    //       return -sortValue;\n    //     }\n    //   })\n    // } else{\n    //   tasks.sort((a,b) =>{\n    //     if(a.status > b.status){\n    //       return -sortValue\n    //     } else if(a.status === b.status){\n    //       return 0\n    //     } else{\n    //       return sortValue;\n    //     }\n    //   })\n    // }\n    return (\n      <div className=\"container\">\n        {/* Title */}\n          <Title />\n        {/* end Title */}\n        <div className=\"row\">\n          {/* Form */}\n          <div className={isDisplayForm === true ? \"col-sm-4\" : \"\"}>\n            <TaskForm/>\n          </div>\n          {/* end Form */}\n          <div className={isDisplayForm === true ? \"col-sm-8\" : \"col-sm-12\"}>\n            <button type=\"button\" className=\"btn btn-primary mb-2\" onClick ={this.onShowForm}>Thêm Công Việc</button>\n            {/* TaskControl : TaskSearch , TaskSort */}\n              <TaskControl onSort = {this.onSort} />\n            {/* end TaskControl */}\n            {/* TaskList : TaskItem */}\n              <TaskList \n                onFilter = {this.onFilter}\n              />\n            {/* end TaskItem */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayForm : state.displayForm,\n    taskEditing : state.editTask\n  }\n};\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm : () => {\n      dispatch(actions.toggleForm())\n    },\n    onClearTask : (task) => {\n      dispatch(actions.editTask(task))\n    },\n    onOpenForm : () => {\n      dispatch(actions.openForm())\n    },\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from '../constants/actionType';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\nvar initialState = data ? data : [];\r\nvar findIndex = (tasks,id) => {\r\n    let result =-1;\r\n    tasks.forEach((task,index) =>{\r\n      if(task.id === id){\r\n        result = index;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\nconst myReducer = (state = initialState , action) => {\r\n    var index = -1;\r\n    var id : '';\r\n    switch(action.type){\r\n        case types.LIST_ALL : return state;\r\n        case types.SAVE_TASK :\r\n            var Task = {\r\n                id : action.task.id,\r\n                name : action.task.name,\r\n                status : action.task.status\r\n            }\r\n            if(Task.id === ''){\r\n                Task.id = uuidv4();\r\n                state.push(Task);\r\n            }else{\r\n                index = findIndex(state,action.task.id);\r\n                state[index] = Task;\r\n            }\r\n            localStorage.setItem('tasks' , JSON.stringify(state));\r\n            return [...state];\r\n        case types.UPDATE_STATUS : \r\n            id = action.id;\r\n            index = findIndex(state,id);\r\n            var cloneTask = {...state[index]};\r\n            cloneTask.status = !cloneTask.status;\r\n            state[index] = cloneTask;\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        case types.DELETE_TASK :\r\n            id = action.id;\r\n            index = findIndex(state,id);\r\n            state.splice(index,1);\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType';\r\nvar initialState = false;\r\nconst myReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case types.TOGGLE_FORM : return !state;\r\n        case types.OPEN_FORM : return true;\r\n        case types.CLOSE_FORM : return false;\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType';\r\nvar initialState = {\r\n    id : '',\r\n    name : '',\r\n    status : false\r\n}\r\nconst myReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case types.EDIT_TASK : \r\n        state = {\r\n            id : action.task.id,\r\n            name : action.task.name,\r\n            status : action.task.status\r\n        }\r\n        return state;\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType';\r\nvar initialState = {\r\n    name : '',\r\n    status : -1\r\n}\r\nconst myReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case types.FILTER_TABLE :\r\n            state = {\r\n                name : action.filter.name,\r\n                status : +action.filter.status\r\n            }\r\n            return state;\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType';\r\nvar initialState = '';\r\nconst myReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case types.SEARCH :\r\n            return action.keyword;\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType';\r\nvar initialState = {\r\n    by: 'name',\r\n    value : 1\r\n}\r\nconst myReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case types.SORT :\r\n            state = {\r\n                by : action.sort.by,\r\n                value : +action.sort.value\r\n            }\r\n            return state;\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport displayForm from './displayForm';\r\nimport editTask from './editTask';\r\nimport filterTable from './filterTable';\r\nimport searchTask from './searchTask';\r\nimport sortTask from './sortTask';\r\nconst myReducer = combineReducers({\r\n    tasks,\r\n    displayForm,\r\n    editTask,\r\n    filterTable,\r\n    searchTask,\r\n    sortTask\r\n});\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// createStore\nimport { createStore } from 'redux';\nimport {Provider} from 'react-redux';\nimport myReducer from './reducers/indexReducer';\n\nconst store = createStore(myReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render(\n                <Provider store = {store} >\n                    <App />\n                </Provider>, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}